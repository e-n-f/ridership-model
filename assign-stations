#!/usr/bin/perl

$foot = .00000274;
$bucket = 5280 * $foot;
$pi = 4 * atan2(1, 1);

$ex = $ARGV[0];
$ex = 0.5625;

open(IN, "names-corrected-centers");
while (<IN>) {
	# 60390 Powell PL bart-home-3-07.svg bart-other-2-08.svg 37.784050,-122.407565

	next if /#/;

	chomp;
	($riders, $name, $code, $where) = split(/ /, $_, 4);
	while ($where =~ s/.*svg //) {
		;
	}
	($lat, $lon) = split(/,/, $where);

	$name{$code} = $name;
	$lat{$code} = $lat;
	$lon{$code} = $lon;
	$riders{$code} = $riders;

	push @{$cand{int($lat / $bucket)}{int($lon / $bucket)}}, $code;
}
close(IN);

open(IN, "Ridership_May2015.csv");
$_ = <IN>;
$_ = <IN>;
@stations = split(/,/, $_);
while (<IN>) {
	@fields = split(/,/);
	last if $fields[0] eq "Entries";
	for ($i = 1; $i <= $#fields; $i++) {
		last if $stations[$i] eq "Exits";

		if ($fields[0] lt $stations[$i]) {
			$name = "$fields[0]-$stations[$i]";
		} else {
			$name = "$stations[$i]-$fields[0]";
		}

		$count{$name} += $fields[$i];
	}
}

sub find {
	my ($lat, $lon) = @_;

	if ($distance{$lat}{$lon} ne "") {
		return ($station{$lat}{$lon}, $distance{$lat}{$lon});
	}

	my $best = "";
	my $bestd = 4 * 5280;
	my $rat = cos($lat * $pi / 180);

	my ($a, $o);
	for ($a = int($lat / $bucket) - 4; $a <= int($lat / $bucket) + 4; $a++) {
		for ($o = int($lon / $bucket) - 4; $o <= int($lon / $bucket) + 4; $o++) {
			my @cand = @{$cand{$a}{$o}};

			for my $c (@cand) {
				my $latd = $lat - $lat{$c};
				my $lond = ($lon - $lon{$c}) * $rat;
				my $d = sqrt($latd * $latd + $lond * $lond) / $foot;

				if ($d < $bestd) {
					$bestd = $d;
					$best = $c;
				}
			}
		}
	}

	$station{$lat}{$lon} = $best;
	$distance{$lat}{$lon} = $bestd;

	return ($best, $bestd);
}

sub pdf {
	my ($x, $u, $o) = @_;

	return exp(- ((log($x) - $u) * (log($x) - $u) / 2 * $o * $o)) / ($x * $o * sqrt(2 * $pi));
}

open(IN, "all-commute-2012-bart");
while (<IN>) {
	$s = int($seq++ * 100 / 3133856);
	if ($s != $os) {
		$os = $s;
		print STDERR "$s\r";
	}

	chomp;
	s/ /,/g;
	@fields = split(/,/);

	$count = $fields[2];
	$worklat = $fields[13];
	$worklon = $fields[14];
	$homelat = $fields[15];
	$homelon = $fields[16];
	$workarea = $fields[17] + $fields[18];
	$homearea = $fields[19] + $fields[20];

	($workstation, $workdistance) = find($worklat, $worklon);
	($homestation, $homedistance) = find($homelat, $homelon);

	next if ($homestation eq $workstation);

	$rat = cos($lat{$workstation} * $pi / 180);
	$latd = $lat{$workstation} - $lat{$homestation};
	$lond = ($lon{$workstation} - $lon{$homestation}) * $rat;
	$dist = sqrt($latd * $latd + $lond * $lond) / $foot;

	$workweight = pdf($workdistance, 7.13947, 1.03404) / exp(log($workdistance) * $ex);
	$homeweight = pdf($homedistance, 8.64499, 1.20751) / exp(log($homedistance) * $ex);

	if ($workstation ne "" && $homestation ne "") {
		if ($workstation le $homestation) {
			$weight{"$workstation-$homestation"} += $workweight * $homeweight * $count;
			$wweight{"$workstation"} += $workweight * $count;
			$hweight{"$homestation"} += $homeweight * $count;
			$warea{"$workstation"} += $workarea * $count;
			$harea{"$homestation"} += $homearea * $count;
			$dist{"$workstation-$homestation"} = $dist;
		} else {
			$weight{"$homestation-$workstation"} += $workweight * $homeweight * $count;
			$wweight{"$workstation"} += $workweight * $count;
			$hweight{"$homestation"} += $homeweight * $count;
			$warea{"$workstation"} += $workarea * $count;
			$harea{"$homestation"} += $homearea * $count;
			$dist{"$homestation-$workstation"} = $dist;
		}
	}

# Determining model for individual origin-destination pairs.
# With first-stage output turned on below:

# Determining empirical boost in trip frequency for longer trips
#
# f(x) = m * x ** a
# fit log(f(x)) "assigned" using 4:(log($3/$2)) via m, a
# a = 0.981606

# Determining scaling from LEHD commute counts to BART trip counts
#
# fit (log(f(x))) "assigned" using (($2 * ($4 ** 0.981606))):(log($3)) via m, a
# m = 1.2826e+06
# a = 0.806351

	if ($workstation ne "" && $homestation ne "") {
		$val = 1.2826e+06 * exp(log($workweight * $homeweight * $count * exp(log($dist) * 0.981606)) * 0.806351);
		$sum{$homestation} += $val;
		$sum{$workstation} += $val;
	}
}

if (0) {
	for $pair (sort(keys(%weight))) {
		printf("%s %.32f %d %d\n", $pair, $weight{$pair}, $count{$pair}, $dist{$pair});
	}

	exit(0);
}

# Then determining model for total at each station.
# With second-stage output:

# f(x) = m * x ** a
# fit log(f(x)) "assigned" using 2:(log($3)) via m, a
# m               = 2.15107          +/- 1.995        (92.73%)
# a               = 0.791789         +/- 0.09027      (11.4%)

### f(x, y, z) = abs(m1) * x ** abs(a1) + abs(m2) * y ** abs(a2) + abs(m3) * z ** abs(a3)
### set dummy x, y, z
### fit log(f(x, y, z)) "assigned" using 2:5:6:(log($3)) via m1, a1, m2, a2, m3, a3

if (1) {
	for $station (sort(keys(%sum))) {
		next if $station eq "";

		printf("%s %.16f %d %d %.16f %.16f\n", $name{$station}, $sum{$station}, $riders{$station}, 2.15107 * exp(log($sum{$station}) * 0.791789),
			$wweight{$station}, $hweight{$station});
	}

	exit(0);
}
