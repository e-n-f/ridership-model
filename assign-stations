#!/usr/bin/perl

$foot = .00000274;
$bucket = 5280 * $foot;
$pi = 4 * atan2(1, 1);

$ex = $ARGV[0];
$ex = 0.5625;

# potential work-ends within 10 miles:
# lognormal distribution of employment locations by distance from stations
# awk '(NR % 100 == 0)' potential-access-work  > potential-access-work-2m
# f(x) = a * (.5 + .5 * erf((log(x) - u) / (sqrt(2) * o)))
# fit f(x) "potential-access-work-2m" using 6:0 via a, u, o
# a               = 1.69762e+06      +/- 4093         (0.2411%)
# u               = 11.754           +/- 0.004162     (0.03541%)
# o               = 1.83484          +/- 0.00125      (0.06813%)

# potential home-ends within 10 miles:
# lognormal distribution of home locations of employed people by distance from stations
# a               = 669569           +/- 576.7        (0.08612%)
# u               = 10.1868          +/- 0.0009673    (0.009495%)
# o               = 0.950885         +/- 0.0004452    (0.04681%)

open(IN, "names-official-centers");
while (<IN>) {
	# 60390 Powell PL bart-home-3-07.svg bart-other-2-08.svg 37.784050,-122.407565

	next if /#/;

	chomp;
	($riders, $name, $code, $where) = split(/ /, $_, 4);
	while ($where =~ s/.*svg //) {
		;
	}
	($lat, $lon) = split(/,/, $where);

	$name{$code} = $name;
	$lat{$code} = $lat;
	$lon{$code} = $lon;
	$riders{$code} = $riders;

	push @{$cand{int($lat / $bucket)}{int($lon / $bucket)}}, $code;
}
close(IN);

open(IN, "Ridership_May2015.csv");
$_ = <IN>;
$_ = <IN>;
@stations = split(/,/, $_);
while (<IN>) {
	@fields = split(/,/);
	last if $fields[0] eq "Entries";
	for ($i = 1; $i <= $#fields; $i++) {
		last if $stations[$i] eq "Exits";

		if ($fields[0] lt $stations[$i]) {
			$name = "$fields[0]-$stations[$i]";
		} else {
			$name = "$stations[$i]-$fields[0]";
		}

		$count{$name} += $fields[$i];
	}
}

sub find {
	my ($lat, $lon) = @_;

	if (defined $distance{$lat}{$lon}) {
		return %{$distance{$lat}{$lon}};
	}

	my %ret = ();

	my $best = "";
	my $bestd = 4 * 5280;
	my $rat = cos($lat * $pi / 180);

	my ($a, $o);
	for ($a = int($lat / $bucket) - 4; $a <= int($lat / $bucket) + 4; $a++) {
		for ($o = int($lon / $bucket) - 4; $o <= int($lon / $bucket) + 4; $o++) {
			my @cand = @{$cand{$a}{$o}};

			for my $c (@cand) {
				my $latd = $lat - $lat{$c};
				my $lond = ($lon - $lon{$c}) * $rat;
				my $d = sqrt($latd * $latd + $lond * $lond) / $foot;

				if ($d < 10 * 5280) {
					$ret{$c} = $d;
				}
			}
		}
	}

	%{$distance{$lat}{$lon}} = %ret;
	return %ret;
}

sub pdf {
	my ($x, $u, $o) = @_;

	return exp(- ((log($x) - $u) * (log($x) - $u) / 2 * $o * $o)) / ($x * $o * sqrt(2 * $pi));
}

open(IN, "all-commute-2012-bart");
while (<IN>) {
	$s = int($seq++ * 100 / 3133856);
	if ($s != $os) {
		$os = $s;
		print STDERR "$s\r";
	}

	chomp;
	s/ /,/g;
	@fields = split(/,/);

	$count = $fields[2];
	$worklat = $fields[13];
	$worklon = $fields[14];
	$homelat = $fields[15];
	$homelon = $fields[16];
	$workarea = $fields[17] + $fields[18];
	$homearea = $fields[19] + $fields[20];

	%workfound = find($worklat, $worklon);
	%homefound = find($homelat, $homelon);

	for $workstation (keys(%workfound)) {
		$workdistance = $workfound{$workstation};

		for $homestation (keys(%homefound)) {
			$homedistance = $homefound{$homestation};

			next if ($homestation eq $workstation);

			$rat = cos($lat{$workstation} * $pi / 180);
			$latd = $lat{$workstation} - $lat{$homestation};
			$lond = ($lon{$workstation} - $lon{$homestation}) * $rat;
			$dist = sqrt($latd * $latd + $lond * $lond) / $foot;

			if (0) {
				# in mode-points format from station profile study
				for ($i = 0; $i < $count; $i++) {
					if ($workstation ne "" && $workdistance < 10 * 5280) {
						print "? $workstation work $worklat,$worklon $lat{$workstation},$lon{$workstation} $workdistance\n";
					}
					if ($homestation ne "" && $homedistance < 10 * 5280) {
						print "? $homestation home $homelat,$homelon $lat{$homestation},$lon{$homestation} $homedistance\n";
					}
				}
			}

			# This is an immense cheat but keeps Berkeley, Lake Merritt, and Civic Center from
			# predicting off the charts because of employment right on top of the station
			if ($homedistance < 500) { $homedistance = 500; }
			if ($workdistance < 500) { $workdistance = 500; }

			$workweight = pdf($workdistance, 7.13947, 1.03404) / pdf($workdistance, 11.754, 1.83484);
			$homeweight = pdf($homedistance, 8.64499, 1.20751) / pdf($homedistance, 10.1868, 0.950885);

			if ($workstation ne "" && $homestation ne "") {
				if ($workstation le $homestation) {
					$weight{"$workstation-$homestation"} += $workweight * $homeweight * $count;
					$wweight{"$workstation"} += $workweight * $count;
					$hweight{"$homestation"} += $homeweight * $count;
					if (! $counted{$workstation}{"$worklat,$worklon"}) {
						$area{"$workstation"} += $workweight * $workarea;
						$counted{$workstation}{"$worklat,$worklon"} = 1;
					}
					if (! $counted{$homestation}{"$homelat,$homelon"}) {
						$area{"$homestation"} += $homeweight * $homearea;
						$counted{$homestation}{"$homelat,$homelon"} = 1;
					}
					$dist{"$workstation-$homestation"} = $dist;
				} else {
					$weight{"$homestation-$workstation"} += $workweight * $homeweight * $count;
					$wweight{"$workstation"} += $workweight * $count;
					$hweight{"$homestation"} += $homeweight * $count;
					if (! $counted{$workstation}{"$worklat,$worklon"}) {
						$area{"$workstation"} += $workweight * $workarea;
						$counted{$workstation}{"$worklat,$worklon"} = 1;
					}
					if (! $counted{$homestation}{"$homelat,$homelon"}) {
						$area{"$homestation"} += $homeweight * $homearea;
						$counted{$homestation}{"$homelat,$homelon"} = 1;
					}
					$dist{"$homestation-$workstation"} = $dist;
				}
			}

		# Determining model for individual origin-destination pairs.
		# With first-stage output turned on below:

		# Determining empirical boost in trip frequency for longer trips
		#
		# f(x) = abs(m) * x ** a
		# fit log(f(x)) "assigned" using 4:(log($3/$2)) via m, a
		# m               = -3.58887e-30     +/- 5.477e-30    (152.6%)
		# a               = 1.72985          +/- 0.1375       (7.95%)

		# Determining scaling from LEHD commute counts to BART trip counts
		#
		# fit (log(f(x))) "assigned" using (($2 * ($4 ** 1.72985))):(log($3)) via m, a
		# m               = 0.0101966        +/- 0.002998     (29.4%)
		# a               = 0.641619         +/- 0.01955      (3.048%)

			if ($workstation ne "" && $homestation ne "") {
				$val = 0.0101966 * exp(log($workweight * $homeweight * $count * exp(log($dist) * 0.701461)) * 0.641619);
				$sum{$homestation} += $val;
				$sum{$workstation} += $val;
			}
		}
	}
}

if (1) {
	for $pair (sort(keys(%weight))) {
		printf("%s %.32f %d %d\n", $pair, $weight{$pair}, $count{$pair}, $dist{$pair});
	}

	exit(0);
}

# Then determining model for total at each station.
# With second-stage output:

# f(x) = m * x ** a
# fit log(f(x)) "assigned" using 2:(log($3)) via m, a
# m               = 1.82615          +/- 1.756        (96.13%)
# a               = 0.739919         +/- 0.08573      (11.59%)

### f(x, y, z) = abs(m1) * x ** abs(a1) + abs(m2) * y ** abs(a2) + abs(m3) * z ** abs(a3)
### set dummy x, y, z
### fit log(f(x, y, z)) "assigned" using 2:5:6:(log($3)) via m1, a1, m2, a2, m3, a3

if (0) {
	for $station (sort(keys(%sum))) {
		next if $station eq "";

		printf("%s %.16f %d %d %.16f %.16f %.16f\n", $name{$station}, $sum{$station}, $riders{$station}, 1.82615 * exp(log($sum{$station}) * 0.739919),
			$wweight{$station}, $hweight{$station}, $area{$station});
	}

	exit(0);
}
