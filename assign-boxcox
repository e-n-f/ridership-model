#!/usr/bin/perl

$foot = .00000274;
$bucket = 5280 * $foot;
$pi = 4 * atan2(1, 1);

$ex = $ARGV[0];
$ex = 0.5625;

sub correlate {
	@x = @{$_[0]};
	@y = @{$_[1]};

	# print "---- x @x, y @y\n";

	my $n = $#x + 1;

	if ($n < 2) {
		return 0;
	}

	my $xsum = 0;
	my $ysum = 0;
	my $x2sum = 0;
	my $y2sum = 0;
	my $xysum = 0;

	for (my $i = 0; $i < $n; $i++) {
		$xsum += $x[$i];
		$ysum += $y[$i];
		$x2sum += $x[$i] * $x[$i];
		$y2sum += $y[$i] * $y[$i];
		$xysum += $x[$i] * $y[$i];
	}

	return ($n * $xysum - $xsum * $ysum) / (sqrt($n * $x2sum - $xsum * $xsum) * sqrt($n * $y2sum - $ysum * $ysum));
}

# my @a = (1, 2, 3, 4, 5, 6);
# my @b = (2, 2, 3, 4, 5, 60);
# $c = correlate([@a], [@b]);
# print "$c\n";

# @exps = (.1, .3, .5, .7, 1, 1.2);
# @exps = (.5, .6, .7, .8, .9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7);
# @exps = (.4, .6, .8, 1, 1.2, 1.4, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2);
# @exps = (.5, .6, .7, .8, 1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0);
@exps = (.50, .55, .60, .65, .70, .75, .80, .85, 2.20, 2.25, 2.30, 2.35, 2.40, 2.45);

# potential work-ends within 10 miles:
# lognormal distribution of employment locations by distance from stations
# f(x) = a * (.5 + .5 * erf((log(x) - u) / (sqrt(2) * o)))
# fit f(x) "potential-access-work" using 6:0 via a, u, o
# a               = 1.69765e+06      +/- 127.1        (0.007489%)
# u               = 8.57             +/- 0.0001474    (0.00172%)
# o               = 1.37114          +/- 0.0001123    (0.008191%)

# potential home-ends within 10 miles:
# lognormal distribution of home locations of employed people by distance from stations
# a               = 1.43479e+06      +/- 43.44        (0.003027%)
# u               = 8.99065          +/- 3.931e-05    (0.0004372%)
# o               = 0.887246         +/- 3.204e-05    (0.003611%)

open(IN, "names-official-centers");
while (<IN>) {
	# 60390 Powell PL bart-home-3-07.svg bart-other-2-08.svg 37.784050,-122.407565

	next if /#/;

	chomp;
	($riders, $name, $code, @rest) = split(/ /);
	$where = $rest[$#rest - 1];
	$freq = $rest[$#rest];
	($lat, $lon) = split(/,/, $where);

	$code =~ s/-/_/g;
	$name{$code} = $name;
	$lat{$code} = $lat;
	$lon{$code} = $lon;
	$riders{$code} = $riders;
	$freq{$code} = $freq;

	push @{$cand{int($lat / $bucket)}{int($lon / $bucket)}}, $code;
}
close(IN);

open(IN, "Ridership_May2015.csv");
$_ = <IN>;
$_ = <IN>;
@stations = split(/,/, $_);
while (<IN>) {
	@fields = split(/,/);
	last if $fields[0] eq "Entries";
	for ($i = 1; $i <= $#fields; $i++) {
		last if $stations[$i] eq "Exits";

		if ($fields[0] lt $stations[$i]) {
			$name = "$fields[0]-$stations[$i]";
		} else {
			$name = "$stations[$i]-$fields[0]";
		}

		$count{$name} += $fields[$i];
	}
}
close(IN);

open(IN, "May-2012-Metrorail-OD-Table-by-Time-of-Day-and-Day-of-Week.csv");
while (<IN>) {
	chomp;
	s/-/_/g;
	s/ /_/g;
	($a, $b, $tod, $count) = split(/,/);
	if ($a lt $b) {
		$count{"$a-$b"} += $count;
	} else {
		$count{"$b-$a"} += $count;
	}
}
close(IN);

sub find {
	my ($lat, $lon) = @_;

	if ($distance{$lat}{$lon} ne "") {
		return ($station{$lat}{$lon}, $distance{$lat}{$lon});
	}

	my $best = "";
	my $bestd = 10 * 5280;
	my $rat = cos($lat * $pi / 180);

	my ($a, $o);
	for ($a = int($lat / $bucket) - 10; $a <= int($lat / $bucket) + 10; $a++) {
		for ($o = int($lon / $bucket) - 10; $o <= int($lon / $bucket) + 10; $o++) {
			my @cand = @{$cand{$a}{$o}};

			for my $c (@cand) {
				my $latd = $lat - $lat{$c};
				my $lond = ($lon - $lon{$c}) * $rat;
				my $d = sqrt($latd * $latd + $lond * $lond) / $foot;

				if ($d < $bestd) {
					$bestd = $d;
					$best = $c;
				}
			}
		}
	}

	$station{$lat}{$lon} = $best;
	$distance{$lat}{$lon} = $bestd;

	return ($best, $bestd);
}

sub fpow {
	my ($b, $e) = @_;

	if ($b == 0) {
		return 0;
	} elsif ($e == 2) {
		return $b * $b;
	} else {
		my $r = exp(log($b) * $e);
		return $r;
	}
}

sub boxcox {
	my ($x, $l) = @_;

	if ($l == 0) {
		return log($x);
	}

	my $r = (fpow($x, $l) - 1) / $l;
	return $r;
}

sub pdf {
	my ($x, $a, $u, $o, $l) = @_;

	my $r = $a * (fpow($x, $l - 1)) / (boxcox($o, $l) * sqrt(2 * $pi)) * exp(- fpow(boxcox($x, $l) - boxcox($u, $l), 2) / (2 * fpow(boxcox($o, $l), 2)));
	return $r;
}

open(IN, "all-commute-2012-bart");
while (<IN>) {
	$s = int($seq++ * 100 / 3133856);
	if ($s != $os) {
		$os = $s;
		print STDERR "$s\r";
	}

	chomp;
	s/ /,/g;
	@fields = split(/,/);

	$count = $fields[2];
	$worklat = $fields[13];
	$worklon = $fields[14];
	$homelat = $fields[15];
	$homelon = $fields[16];
	$workarea = $fields[17] + $fields[18];
	$homearea = $fields[19] + $fields[20];

	($workstation, $workdistance) = find($worklat, $worklon);
	($homestation, $homedistance) = find($homelat, $homelon);

	next if ($homestation eq $workstation);

	$rat = cos($lat{$workstation} * $pi / 180);
	$latd = $lat{$workstation} - $lat{$homestation};
	$lond = ($lon{$workstation} - $lon{$homestation}) * $rat;
	$dist = sqrt($latd * $latd + $lond * $lond) / $foot;

	if (0) {
		# in mode-points format from station profile study
		for ($i = 0; $i < $count; $i++) {
			if ($workstation ne "" && $workdistance < 10 * 5280) {
				print "? $workstation work $worklat,$worklon $lat{$workstation},$lon{$workstation} $workdistance\n";
			}
			if ($homestation ne "" && $homedistance < 10 * 5280) {
				print "? $homestation home $homelat,$homelon $lat{$homestation},$lon{$homestation} $homedistance\n";
			}
		}
	}

	# This is an immense cheat but keeps Berkeley, Lake Merritt, and Civic Center from
	# predicting off the charts because of employment right on top of the station

	$workweight = (pdf($workdistance, 133686, 990, 37.4624, 0.312) +
		       pdf($workdistance, 37600, 6376, 1.00334, -0.588)) /
		      (10 * (pdf($workdistance, 155673, 4634.18, 7.78672, 0.065896) +
                             pdf($workdistance, 12108.1, 38096.7, 13.4126, 0.281497)));
	$homeweight = (pdf($homedistance, 145726, 5859.81, 1.87102, -0.083514)) /
		      (10 * (pdf($homedistance, 137748, 7757, 3.8884, 0.0558907) +
                             pdf($homedistance, 13593.1, 39918.2, 27.3165, 0.342803)));

	if ($workstation ne "" && $homestation ne "") {
		$we = 2.25;
		$he = 0.65; # best correlation, but bad linearity

		$we = .5;
		$he = .5;

		if ($freq{$workstation} < $freq{$homestation}) {
			$f = $freq{$workstation};
		} else {
			$f = $freq{$homestation};
		}

		# for $we (@exps) {
			# for $he (@exps) {
		{
			{
				$w = exp(log($workweight) * $we) * exp(log($homeweight) * $he) * $count;
				if ($workstation le $homestation) {
					$weight{"$workstation-$homestation"}{$we}{$he} += $w;
					$wweight{"$workstation"} += $workweight * $count;
					$hweight{"$homestation"} += $homeweight * $count;
					if (! $counted{$workstation}{"$worklat,$worklon"}) {
						$area{"$workstation"} += $workweight * $workarea;
						$blocks{"$workstation"} += $workweight;
						$counted{$workstation}{"$worklat,$worklon"} = 1;
					}
					if (! $counted{$homestation}{"$homelat,$homelon"}) {
						$area{"$homestation"} += $homeweight * $homearea;
						$blocks{"$homestation"} += $homeweight;
						$counted{$homestation}{"$homelat,$homelon"} = 1;
					}
					$dist{"$workstation-$homestation"} = $dist;
					$pairfreq{"$workstation-$homestation"} = $f;
				} else {
					$weight{"$homestation-$workstation"}{$we}{$he} += $w;
					$wweight{"$workstation"} += $workweight * $count;
					$hweight{"$homestation"} += $homeweight * $count;
					if (! $counted{$workstation}{"$worklat,$worklon"}) {
						$area{"$workstation"} += $workweight * $workarea;
						$blocks{"$workstation"} += $workweight;
						$counted{$workstation}{"$worklat,$worklon"} = 1;
					}
					if (! $counted{$homestation}{"$homelat,$homelon"}) {
						$area{"$homestation"} += $homeweight * $homearea;
						$blocks{"$homestation"} += $homeweight;
						$counted{$homestation}{"$homelat,$homelon"} = 1;
					}
					$dist{"$homestation-$workstation"} = $dist;
					$pairfreq{"$homestation-$workstation"} = $f;
				}
			}
		}
	}

# Determining model for individual origin-destination pairs.
# With first-stage output turned on below
# and names-official-centers limited to current BART stations:

# set dummy predicted, distance, freq
# f(predicted, distance, freq) = a * predicted ** pe * distance ** de * freq ** fe
# fit (f(predicted, distance, freq)) "pairs" using 2:4:9:(($3)) via a, pe, de, fe
# plot "pairs" using (f($2, $4, $9)):3, predicted

# a               = 0.00429905       +/- 0.002746     (63.87%)
# pe              = 0.54929          +/- 0.01852      (3.371%)
# de              = 0.308276         +/- 0.0289       (9.375%)
# fe              = 1.01914          +/- 0.07437      (7.297%)

# a: multiplier
# pe: exponent of predicted ridership
# de: exponent of increased trip frequency of long trips
# fe: exponent of increased trip frequency with more frequent train service

	if ($workstation ne "" && $homestation ne "") {
		$val = 0.00429905 * exp(log($workweight * $homeweight) * 0.54929) * exp(log($dist) * 0.308276) * exp(log($f) * 1.01914);
		$sum{$homestation} += $val;
		$sum{$workstation} += $val;
	}
}

if (0) {
	for $we (@exps) {
		for $he (@exps) {
			@a1 = ();
			@a2 = ();

			for $pair (sort(keys(%weight))) {
				push @a1, log($count{$pair});
				push @a2, log($weight{$pair}{$we}{$he});

				# ($s1, $s2) = split(/-/, $pair);
				# printf("%s %.32f %d %d %.16f %.16f %.16f %.16f\n", $pair, $weight{$pair}{$we}{$he}, $count{$pair}, $dist{$pair}, ($wweight{$s1} + $hweight{$s1}) / $area{$s1}, ($wweight{$s2} + $hweight{$s2}) / $area{$s2}, $blocks{$s1} / $area{$s1}, $blocks{$s2} / $area{$s2});
			}

			$corr = correlate([@a1], [@a2]);
			print "$corr $we $he\n";
		}
	}

	exit(0);
}

if (0) {
	for $pair (sort(keys(%weight))) {
		($s1, $s2) = split(/-/, $pair);
		printf("%s %.32f %d %d %.16f %.16f %.16f %.16f %d\n", $pair, $weight{$pair}{$we}{$he}, $count{$pair}, $dist{$pair}, ($wweight{$s1} + $hweight{$s1}) / $area{$s1}, ($wweight{$s2} + $hweight{$s2}) / $area{$s2}, $blocks{$s1} / $area{$s1}, $blocks{$s2} / $area{$s2}, $pairfreq{$pair});
	}

	exit(0);
}

# Then determining model for total at each station.
# With second-stage output
# (with both BART and Caltrain included):

# f(x) = m * x ** a
# fit log(f(x)) "assigned" using 2:(log($3)) via m, a
# m               = 1.95899          +/- 1.18         (60.25%)
# a               = 0.741568         +/- 0.05714      (7.705%)

### f(x, y, z) = abs(m1) * x ** abs(a1) + abs(m2) * y ** abs(a2) + abs(m3) * z ** abs(a3)
### set dummy x, y, z
### fit log(f(x, y, z)) "assigned" using 2:5:6:(log($3)) via m1, a1, m2, a2, m3, a3

# f(pairs, dens1, dens2, freq) = a * pairs ** pe * dens1 ** de1 * dens2 ** de2 * freq ** fe
# set dummy pairs, dens1, dens2, freq
# fit log(f(pairs, dens1, dens2, freq)) "assigned" using 2:($5/$7):($6/$7):8:(log($3)) via a, pe, de1, de2, fe
# plot "assigned" using (f($2, ($5/$7), ($6/$7), $8)):3, pairs
#
# a               = 6.49339          +/- 4.284        (65.97%)
# pe              = 0.3344           +/- 0.05283      (15.8%)
# de1             = 0.165227         +/- 0.03138      (18.99%)
# de2             = -0.100011        +/- 0.04921      (49.2%)
# fe              = 0.645254         +/- 0.05544      (8.592%)

if (1) {
	for $station (sort(keys(%sum))) {
		next if $station eq "";
		next if $wweight{$station} == 0 || $hweight{$station} == 0;

		printf("%s %.16f %d %d %.16f %.16f %.16f %d\n", $name{$station}, $sum{$station}, $riders{$station},
			6.49339 * exp(log($sum{$station}) * 0.3344) *
			exp(log($wweight{$station} / $area{$station}) * 0.165227) *
			exp(log($hweight{$station} / $area{$station}) * -0.100011) *
			exp(log($freq{$station}) * 0.645254),
			$wweight{$station}, $hweight{$station}, $area{$station}, $freq{$station});
	}

	exit(0);
}
