#!/usr/bin/perl

$foot = .00000274;
$bucket = 5280 * $foot;
$pi = 4 * atan2(1, 1);

$ex = $ARGV[0];
$ex = 0.5625;

# potential work-ends within 10 miles:
# lognormal distribution of employment locations by distance from stations
# f(x) = a * (.5 + .5 * erf((log(x) - u) / (sqrt(2) * o)))
# fit f(x) "potential-access-work" using 6:0 via a, u, o
# a               = 1.69765e+06      +/- 127.1        (0.007489%)
# u               = 8.57             +/- 0.0001474    (0.00172%)
# o               = 1.37114          +/- 0.0001123    (0.008191%)

# potential home-ends within 10 miles:
# lognormal distribution of home locations of employed people by distance from stations
# a               = 1.43479e+06      +/- 43.44        (0.003027%)
# u               = 8.99065          +/- 3.931e-05    (0.0004372%)
# o               = 0.887246         +/- 3.204e-05    (0.003611%)

open(IN, "names-official-centers");
while (<IN>) {
	# 60390 Powell PL bart-home-3-07.svg bart-other-2-08.svg 37.784050,-122.407565

	next if /#/;

	chomp;
	($riders, $name, $code, $where) = split(/ /, $_, 4);
	while ($where =~ s/.*svg //) {
		;
	}
	($lat, $lon) = split(/,/, $where);

	$code =~ s/-/_/g;
	$name{$code} = $name;
	$lat{$code} = $lat;
	$lon{$code} = $lon;
	$riders{$code} = $riders;

	push @{$cand{int($lat / $bucket)}{int($lon / $bucket)}}, $code;
}
close(IN);

open(IN, "Ridership_May2015.csv");
$_ = <IN>;
$_ = <IN>;
@stations = split(/,/, $_);
while (<IN>) {
	@fields = split(/,/);
	last if $fields[0] eq "Entries";
	for ($i = 1; $i <= $#fields; $i++) {
		last if $stations[$i] eq "Exits";

		if ($fields[0] lt $stations[$i]) {
			$name = "$fields[0]-$stations[$i]";
		} else {
			$name = "$stations[$i]-$fields[0]";
		}

		$count{$name} += $fields[$i];
	}
}
close(IN);

open(IN, "May-2012-Metrorail-OD-Table-by-Time-of-Day-and-Day-of-Week.csv");
while (<IN>) {
	chomp;
	s/-/_/g;
	s/ /_/g;
	($a, $b, $tod, $count) = split(/,/);
	if ($a lt $b) {
		$count{"$a-$b"} += $count;
	} else {
		$count{"$b-$a"} += $count;
	}
}
close(IN);

sub find {
	my ($lat, $lon) = @_;

	if ($distance{$lat}{$lon} ne "") {
		return ($station{$lat}{$lon}, $distance{$lat}{$lon});
	}

	my $best = "";
	my $bestd = 10 * 5280;
	my $rat = cos($lat * $pi / 180);

	my ($a, $o);
	for ($a = int($lat / $bucket) - 10; $a <= int($lat / $bucket) + 10; $a++) {
		for ($o = int($lon / $bucket) - 10; $o <= int($lon / $bucket) + 10; $o++) {
			my @cand = @{$cand{$a}{$o}};

			for my $c (@cand) {
				my $latd = $lat - $lat{$c};
				my $lond = ($lon - $lon{$c}) * $rat;
				my $d = sqrt($latd * $latd + $lond * $lond) / $foot;

				if ($d < $bestd) {
					$bestd = $d;
					$best = $c;
				}
			}
		}
	}

	$station{$lat}{$lon} = $best;
	$distance{$lat}{$lon} = $bestd;

	return ($best, $bestd);
}

sub fpow {
	my ($b, $e) = @_;

	if ($b == 0) {
		return 0;
	} elsif ($e == 2) {
		return $b * $b;
	} else {
		my $r = exp(log($b) * $e);
		return $r;
	}
}

sub boxcox {
	my ($x, $l) = @_;

	if ($l == 0) {
		return log($x);
	}

	my $r = (fpow($x, $l) - 1) / $l;
	return $r;
}

sub pdf {
	my ($x, $a, $u, $o, $l) = @_;

	my $r = $a * (fpow($x, $l - 1)) / (boxcox($o, $l) * sqrt(2 * $pi)) * exp(- fpow(boxcox($x, $l) - boxcox($u, $l), 2) / (2 * fpow(boxcox($o, $l), 2)));
	return $r;
}

open(IN, "all-commute-2012-bart");
while (<IN>) {
	$s = int($seq++ * 100 / 3133856);
	if ($s != $os) {
		$os = $s;
		print STDERR "$s\r";
	}

	chomp;
	s/ /,/g;
	@fields = split(/,/);

	$count = $fields[2];
	$worklat = $fields[13];
	$worklon = $fields[14];
	$homelat = $fields[15];
	$homelon = $fields[16];
	$workarea = $fields[17] + $fields[18];
	$homearea = $fields[19] + $fields[20];

	($workstation, $workdistance) = find($worklat, $worklon);
	($homestation, $homedistance) = find($homelat, $homelon);

	next if ($homestation eq $workstation);

	$rat = cos($lat{$workstation} * $pi / 180);
	$latd = $lat{$workstation} - $lat{$homestation};
	$lond = ($lon{$workstation} - $lon{$homestation}) * $rat;
	$dist = sqrt($latd * $latd + $lond * $lond) / $foot;

	if (0) {
		# in mode-points format from station profile study
		for ($i = 0; $i < $count; $i++) {
			if ($workstation ne "" && $workdistance < 10 * 5280) {
				print "? $workstation work $worklat,$worklon $lat{$workstation},$lon{$workstation} $workdistance\n";
			}
			if ($homestation ne "" && $homedistance < 10 * 5280) {
				print "? $homestation home $homelat,$homelon $lat{$homestation},$lon{$homestation} $homedistance\n";
			}
		}
	}

	# This is an immense cheat but keeps Berkeley, Lake Merritt, and Civic Center from
	# predicting off the charts because of employment right on top of the station
	if ($homedistance < 500) { $homedistance = 500; }
	if ($workdistance < 500) { $workdistance = 500; }

	$workweight = (pdf($workdistance, 133686, 990, 37.4624, 0.312) +
		       pdf($workdistance, 37600, 6376, 1.00334, -0.588)) /
		      (10 * (pdf($workdistance, 155673, 4634.18, 7.78672, 0.065896) +
                             pdf($workdistance, 12108.1, 38096.7, 13.4126, 0.281497)));
	$homeweight = (pdf($homedistance, 145726, 5859.81, 1.87102, -0.083514)) /
		      (10 * (pdf($homedistance, 137748, 7757, 3.8884, 0.0558907) +
                             pdf($homedistance, 13593.1, 39918.2, 27.3165, 0.342803)));

	if ($workstation ne "" && $homestation ne "") {
		if ($workstation le $homestation) {
			$weight{"$workstation-$homestation"} += $workweight * $homeweight * $count;
			$wweight{"$workstation"} += $workweight * $count;
			$hweight{"$homestation"} += $homeweight * $count;
			if (! $counted{$workstation}{"$worklat,$worklon"}) {
				$area{"$workstation"} += $workweight * $workarea;
				$blocks{"$workstation"} += $workweight;
				$counted{$workstation}{"$worklat,$worklon"} = 1;
			}
			if (! $counted{$homestation}{"$homelat,$homelon"}) {
				$area{"$homestation"} += $homeweight * $homearea;
				$blocks{"$homestation"} += $homeweight;
				$counted{$homestation}{"$homelat,$homelon"} = 1;
			}
			$dist{"$workstation-$homestation"} = $dist;
		} else {
			$weight{"$homestation-$workstation"} += $workweight * $homeweight * $count;
			$wweight{"$workstation"} += $workweight * $count;
			$hweight{"$homestation"} += $homeweight * $count;
			if (! $counted{$workstation}{"$worklat,$worklon"}) {
				$area{"$workstation"} += $workweight * $workarea;
				$blocks{"$workstation"} += $workweight;
				$counted{$workstation}{"$worklat,$worklon"} = 1;
			}
			if (! $counted{$homestation}{"$homelat,$homelon"}) {
				$area{"$homestation"} += $homeweight * $homearea;
				$blocks{"$homestation"} += $homeweight;
				$counted{$homestation}{"$homelat,$homelon"} = 1;
			}
			$dist{"$homestation-$workstation"} = $dist;
		}
	}

# Determining model for individual origin-destination pairs.
# With first-stage output turned on below:

# Determining empirical boost in trip frequency for longer trips
#
# f(x) = abs(m) * x ** a
# fit log(f(x)) "assigned" using 4:(log($3/$2)) via m, a
# m               = 4.83842e-05      +/- 2.784e-05    (57.55%)
# a               = 0.701461         +/- 0.05186      (7.393%)

# Determining scaling from LEHD commute counts to BART trip counts
#
# fit (log(f(x))) "assigned" using (($2 * ($4 ** 0.701461))):(log($3)) via m, a
# m               = 0.0101966        +/- 0.002998     (29.4%)
# a               = 0.641619         +/- 0.01955      (3.048%)

	if ($workstation ne "" && $homestation ne "") {
		$val = 0.0101966 * exp(log($workweight * $homeweight * $count * exp(log($dist) * 0.701461)) * 0.641619);
		$sum{$homestation} += $val;
		$sum{$workstation} += $val;
	}
}

if (0) {
	for $pair (sort(keys(%weight))) {
		($s1, $s2) = split(/-/, $pair);
		printf("%s %.32f %d %d %.16f %.16f %.16f %.16f\n", $pair, $weight{$pair}, $count{$pair}, $dist{$pair}, ($wweight{$s1} + $hweight{$s1}) / $area{$s1}, ($wweight{$s2} + $hweight{$s2}) / $area{$s2}, $blocks{$s1} / $area{$s1}, $blocks{$s2} / $area{$s2});
	}

	exit(0);
}

# Then determining model for total at each station.
# With second-stage output:

# f(x) = m * x ** a
# fit log(f(x)) "assigned" using 2:(log($3)) via m, a
# m               = 1.82615          +/- 1.756        (96.13%)
# a               = 0.739919         +/- 0.08573      (11.59%)

### f(x, y, z) = abs(m1) * x ** abs(a1) + abs(m2) * y ** abs(a2) + abs(m3) * z ** abs(a3)
### set dummy x, y, z
### fit log(f(x, y, z)) "assigned" using 2:5:6:(log($3)) via m1, a1, m2, a2, m3, a3

if (1) {
	for $station (sort(keys(%sum))) {
		next if $station eq "";

		printf("%s %.16f %d %d %.16f %.16f %.16f\n", $name{$station}, $sum{$station}, $riders{$station}, 1.82615 * exp(log($sum{$station}) * 0.739919),
			$wweight{$station}, $hweight{$station}, $area{$station});
	}

	exit(0);
}
